//! # Schnorr signatures compliant with BIP-340

use super::{Error, from_hex, ffi, Signing, Verification, Secp256k1, Message, key};
use core::{fmt, str, ptr};

/// A Schnorr signature
#[derive(Clone, PartialEq, Eq)]
#[cfg_attr(not(feature = "zeroize"), derive(Copy))]
pub struct SchnorrSignature(ffi::SchnorrSignature);

impl fmt::Debug for SchnorrSignature {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        fmt::Display::fmt(self, f)
    }
}

impl fmt::Display for SchnorrSignature {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let v = self.serialize_default();
        for ch in &v[..] {
            write!(f, "{:02x}", *ch)?;
        }
        Ok(())
    }
}

impl str::FromStr for SchnorrSignature {
    type Err = Error;
    fn from_str(s: &str) -> Result<SchnorrSignature, Error> {
        let mut res = [0; 64];
        match from_hex(s, &mut res) {
            Ok(x) => SchnorrSignature::from_default(&res[0..x]),
            _ => Err(Error::InvalidSignature),
        }
    }
}

/// Creates a new signature from a FFI signature
impl From<ffi::SchnorrSignature> for SchnorrSignature {
    #[inline]
    fn from(sig: ffi::SchnorrSignature) -> SchnorrSignature {
        SchnorrSignature(sig)
    }
}

#[cfg(feature = "serde")]
impl ::serde::Serialize for SchnorrSignature {
    fn serialize<S: ::serde::Serializer>(&self, s: S) -> Result<S::Ok, S::Error> {
        s.serialize_bytes(&self.serialize_default())
    }
}

#[cfg(feature = "serde")]
impl<'de> ::serde::Deserialize<'de> for SchnorrSignature {
    fn deserialize<D: ::serde::Deserializer<'de>>(d: D) -> Result<SchnorrSignature, D::Error> {
        use ::serde::de::Error;

        let sl: &[u8] = ::serde::Deserialize::deserialize(d)?;
        SchnorrSignature::from_default(sl).map_err(D::Error::custom)
    }
}

impl SchnorrSignature {
    #[inline]
    /// Converts the default encoded byte slice to a Schnorr signature
    pub fn from_default(data: &[u8]) -> Result<SchnorrSignature, Error> {
        let mut ret = unsafe { ffi::SchnorrSignature::blank() };
        if data.len() != 64 {
            return Err(Error::InvalidSignature)
        }

        unsafe {
            if ffi::secp256k1_schnorrsig_parse(
                ffi::secp256k1_context_no_precomp,
                &mut ret,
                data.as_ptr(),
            ) == 1
            {
                Ok(SchnorrSignature(ret))
            } else {
                Err(Error::InvalidSignature)
            }
        }
    }

    /// Obtains a raw pointer suitable for use with FFI functions
    #[inline]
    pub fn as_ptr(&self) -> *const ffi::SchnorrSignature {
        &self.0 as *const _
    }

    #[inline]
    /// Serializes the Schnorr signature in the default format
    pub fn serialize_default(&self) -> [u8; 64] {
        let mut ret = [0; 64];
        unsafe {
            let err = ffi::secp256k1_schnorrsig_serialize(
                ffi::secp256k1_context_no_precomp,
                ret.as_mut_ptr(),
                self.as_ptr(),
            );
            debug_assert!(err == 1);
        }
        ret
    }
}

/// Constructs a Schnorr signature for `msg` using the secret key `sk` and BIP Schnorr nonce.
/// Requires a signing-capable context.
pub fn schnorr_sign<C: Signing>(secp: &Secp256k1<C>, msg: &Message, sk: &key::SecretKey)
                    -> SchnorrSignature {

    let mut ret = unsafe { ffi::SchnorrSignature::blank() };

    unsafe {
        // We can assume the return value because it's not possible to construct
        // an invalid signature from a valid `Message` and `SecretKey`
        assert_eq!(ffi::secp256k1_schnorrsig_sign(secp.ctx, &mut ret, msg.as_ptr(),
                                                sk.as_ptr(), Option::None, ptr::null()), 1);
    }

    SchnorrSignature::from(ret)
}

/// Checks that `sig` is a valid Schnorr signature for `msg` using the public
/// key `pubkey`. Returns `Ok(true)` on success.
/// Requires a verify-capable context.
/// TODO: batch verification
#[inline]
pub fn schnorr_verify<C: Verification>(secp: &Secp256k1<C>, 
                                       msg: &Message,
                                       sig: &SchnorrSignature,
                                       pk: &key::XOnlyPublicKey)
                                       -> Result<(), Error> {
    unsafe {
        if ffi::secp256k1_schnorrsig_verify(secp.ctx, sig.as_ptr(), msg.as_ptr(), pk.as_ptr()) == 0 {
            Err(Error::IncorrectSignature)
        } else {
            Ok(())
        }
    }
}

#[cfg(test)]
mod tests {
    use rand::{RngCore, thread_rng};
    use super::{Secp256k1, SchnorrSignature, schnorr_verify, schnorr_sign, Message,
    key::{SecretKey, XOnlyPublicKey}};

    #[test]
    fn schnorr_capabilities() {
        let sign = Secp256k1::signing_only();
        let vrfy = Secp256k1::verification_only();
        let full = Secp256k1::new();

        let mut msg = [0u8; 32];
        thread_rng().fill_bytes(&mut msg);
        let msg = Message::from_slice(&msg).unwrap();

        // Try key generation
        let (sk, pk) = full.generate_keypair(&mut thread_rng());
        let (x_only_pk, _) = XOnlyPublicKey::from_pubkey(&pk);
        // Try signing
        assert_eq!(schnorr_sign(&sign, &msg, &sk), schnorr_sign(&full, &msg, &sk));
        let sig = schnorr_sign(&full, &msg, &sk);

        // Try verifying
        assert!(schnorr_verify(&vrfy, &msg, &sig, &x_only_pk).is_ok());
        assert!(schnorr_verify(&full, &msg, &sig, &x_only_pk).is_ok());
    }

    fn schnorr_bip_vectors_check_signing(sk_serialized: &[u8; 32], x_only_pk_serialized: &[u8; 32], 
        msg: &[u8; 32], expected_sig_serialized: &[u8; 64]) {
            let secp = Secp256k1::new();
            let sk = SecretKey::from_slice(&sk_serialized[..]).expect("failed to parse secret key");
            let msg32 = Message::from_slice(&msg[..]).expect("failed to parse message");
            let expected_sig = SchnorrSignature::from_default(&expected_sig_serialized[..])
                .expect("failed to parse Schnorr sig");
            let sig = schnorr_sign(&secp, &msg32, &sk);
            assert_eq!(sig, expected_sig);
            let serialized_sig = sig.serialize_default();
            assert!(serialized_sig.iter().zip(expected_sig_serialized.iter()).all(|(a,b)| a == b), 
                "Serializaed signatures are not equal");
            let pk = XOnlyPublicKey::from_slice(&x_only_pk_serialized[..]).expect("failed to parse public key");
            assert!(schnorr_verify(&secp, &msg32, &sig, &pk).is_ok());
    }

    fn schnorr_bip_vectors_check_verify(x_only_pk_serialized: &[u8; 32], 
        msg: &[u8; 32], sig_serialized: &[u8; 64], is_ok: bool) {
            let secp = Secp256k1::new();
            let msg32 = Message::from_slice(&msg[..]).expect("failed to parse message");
            let sig = SchnorrSignature::from_default(&sig_serialized[..])
                .expect("failed to parse Schnorr sig");
            let pk = XOnlyPublicKey::from_slice(&x_only_pk_serialized[..]).expect("failed to parse public key");
            assert_eq!(schnorr_verify(&secp, &msg32, &sig, &pk).is_ok(), is_ok);
    }

    #[test]
    fn schnorr_bip_vectors() {
            // Test vector 0 -- zero message not allowed in Rust API
            {
                /* Test vector 1 */
                let sk = [
                    0xB7, 0xE1, 0x51, 0x62, 0x8A, 0xED, 0x2A, 0x6A,
                    0xBF, 0x71, 0x58, 0x80, 0x9C, 0xF4, 0xF3, 0xC7,
                    0x62, 0xE7, 0x16, 0x0F, 0x38, 0xB4, 0xDA, 0x56,
                    0xA7, 0x84, 0xD9, 0x04, 0x51, 0x90, 0xCF, 0xEF
                ];
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x66, 0x7C, 0x2F, 0x77, 0x8E, 0x06, 0x16, 0xE6,
                    0x11, 0xBD, 0x0C, 0x14, 0xB8, 0xA6, 0x00, 0xC5,
                    0x88, 0x45, 0x51, 0x70, 0x1A, 0x94, 0x9E, 0xF0,
                    0xEB, 0xFD, 0x72, 0xD4, 0x52, 0xD6, 0x4E, 0x84,
                    0x41, 0x60, 0xBC, 0xFC, 0x3F, 0x46, 0x6E, 0xCB,
                    0x8F, 0xAC, 0xD1, 0x9A, 0xDE, 0x57, 0xD8, 0x69,
                    0x9D, 0x74, 0xE7, 0x20, 0x7D, 0x78, 0xC6, 0xAE,
                    0xDC, 0x37, 0x99, 0xB5, 0x2A, 0x8E, 0x05, 0x98
                ];
                schnorr_bip_vectors_check_signing(&sk, &pk, &msg, &sig);
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
            }
            {
                /* Test vector 2 */
                let sk = [
                    0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
                    0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
                    0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
                    0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x14, 0xE5, 0xC9
                ];
                let pk = [
                    0xDD, 0x30, 0x8A, 0xFE, 0xC5, 0x77, 0x7E, 0x13,
                    0x12, 0x1F, 0xA7, 0x2B, 0x9C, 0xC1, 0xB7, 0xCC,
                    0x01, 0x39, 0x71, 0x53, 0x09, 0xB0, 0x86, 0xC9,
                    0x60, 0xE1, 0x8F, 0xD9, 0x69, 0x77, 0x4E, 0xB8
                ];
                let msg = [
                    0x5E, 0x2D, 0x58, 0xD8, 0xB3, 0xBC, 0xDF, 0x1A,
                    0xBA, 0xDE, 0xC7, 0x82, 0x90, 0x54, 0xF9, 0x0D,
                    0xDA, 0x98, 0x05, 0xAA, 0xB5, 0x6C, 0x77, 0x33,
                    0x30, 0x24, 0xB9, 0xD0, 0xA5, 0x08, 0xB7, 0x5C
                ];
                let sig = [
                    0x2D, 0x94, 0x1B, 0x38, 0xE3, 0x26, 0x24, 0xBF,
                    0x0A, 0xC7, 0x66, 0x9C, 0x09, 0x71, 0xB9, 0x90,
                    0x99, 0x4A, 0xF6, 0xF9, 0xB1, 0x84, 0x26, 0xBF,
                    0x4F, 0x4E, 0x7E, 0xC1, 0x0E, 0x6C, 0xDF, 0x38,
                    0x6C, 0xF6, 0x46, 0xC6, 0xDD, 0xAF, 0xCF, 0xA7,
                    0xF1, 0x99, 0x3E, 0xEB, 0x2E, 0x4D, 0x66, 0x41,
                    0x6A, 0xEA, 0xD1, 0xDD, 0xAE, 0x2F, 0x22, 0xD6,
                    0x3C, 0xAD, 0x90, 0x14, 0x12, 0xD1, 0x16, 0xC6
                ];
                schnorr_bip_vectors_check_signing(&sk, &pk, &msg, &sig);
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
            }
            {
                /* Test vector 3 */
                let sk = [
                    0x0B, 0x43, 0x2B, 0x26, 0x77, 0x93, 0x73, 0x81,
                    0xAE, 0xF0, 0x5B, 0xB0, 0x2A, 0x66, 0xEC, 0xD0,
                    0x12, 0x77, 0x30, 0x62, 0xCF, 0x3F, 0xA2, 0x54,
                    0x9E, 0x44, 0xF5, 0x8E, 0xD2, 0x40, 0x17, 0x10
                ];
                let pk = [
                    0x25, 0xD1, 0xDF, 0xF9, 0x51, 0x05, 0xF5, 0x25,
                    0x3C, 0x40, 0x22, 0xF6, 0x28, 0xA9, 0x96, 0xAD,
                    0x3A, 0x0D, 0x95, 0xFB, 0xF2, 0x1D, 0x46, 0x8A,
                    0x1B, 0x33, 0xF8, 0xC1, 0x60, 0xD8, 0xF5, 0x17
                ];
                let msg = [
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
                ];
                let sig = [
                    0x8B, 0xD2, 0xC1, 0x16, 0x04, 0xB0, 0xA8, 0x7A,
                    0x44, 0x3F, 0xCC, 0x2E, 0x5D, 0x90, 0xE5, 0x32,
                    0x8F, 0x93, 0x41, 0x61, 0xB1, 0x88, 0x64, 0xFB,
                    0x48, 0xCE, 0x10, 0xCB, 0x59, 0xB4, 0x5F, 0xB9,
                    0xB5, 0xB2, 0xA0, 0xF1, 0x29, 0xBD, 0x88, 0xF5,
                    0xBD, 0xC0, 0x5D, 0x5C, 0x21, 0xE5, 0xC5, 0x71,
                    0x76, 0xB9, 0x13, 0x00, 0x23, 0x35, 0x78, 0x4F,
                    0x97, 0x77, 0xA2, 0x4B, 0xD3, 0x17, 0xCD, 0x36
                ];
                schnorr_bip_vectors_check_signing(&sk, &pk, &msg, &sig);
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
            }
            {
                /* Test vector 4 */
                let pk = [
                    0xD6, 0x9C, 0x35, 0x09, 0xBB, 0x99, 0xE4, 0x12,
                    0xE6, 0x8B, 0x0F, 0xE8, 0x54, 0x4E, 0x72, 0x83,
                    0x7D, 0xFA, 0x30, 0x74, 0x6D, 0x8B, 0xE2, 0xAA,
                    0x65, 0x97, 0x5F, 0x29, 0xD2, 0x2D, 0xC7, 0xB9
                ];
                let msg = [
                    0x4D, 0xF3, 0xC3, 0xF6, 0x8F, 0xCC, 0x83, 0xB2,
                    0x7E, 0x9D, 0x42, 0xC9, 0x04, 0x31, 0xA7, 0x24,
                    0x99, 0xF1, 0x78, 0x75, 0xC8, 0x1A, 0x59, 0x9B,
                    0x56, 0x6C, 0x98, 0x89, 0xB9, 0x69, 0x67, 0x03
                ];
                let sig = [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x3B, 0x78, 0xCE, 0x56, 0x3F,
                    0x89, 0xA0, 0xED, 0x94, 0x14, 0xF5, 0xAA, 0x28,
                    0xAD, 0x0D, 0x96, 0xD6, 0x79, 0x5F, 0x9C, 0x63,
                    0xEE, 0x37, 0x4A, 0xC7, 0xFA, 0xE9, 0x27, 0xD3,
                    0x34, 0xCC, 0xB1, 0x90, 0xF6, 0xFB, 0x8F, 0xD2,
                    0x7A, 0x2D, 0xDC, 0x63, 0x9C, 0xCE, 0xE4, 0x6D,
                    0x43, 0xF1, 0x13, 0xA4, 0x03, 0x5A, 0x2C, 0x7F
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
            }
            {
                /* Test vector 5 */
                let pk = [
                    0xEE, 0xFD, 0xEA, 0x4C, 0xDB, 0x67, 0x77, 0x50,
                    0xA4, 0x20, 0xFE, 0xE8, 0x07, 0xEA, 0xCF, 0x21,
                    0xEB, 0x98, 0x98, 0xAE, 0x79, 0xB9, 0x76, 0x87,
                    0x66, 0xE4, 0xFA, 0xA0, 0x4A, 0x2D, 0x4A, 0x34
                ];
                /* No need to check the signature of the test vector as parsing the pubkey already fails */
                assert!(XOnlyPublicKey::from_slice(&pk).is_err());
            }
            {
                /* Test vector 6 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0xF9, 0x30, 0x8A, 0x01, 0x92, 0x58, 0xC3, 0x10,
                    0x49, 0x34, 0x4F, 0x85, 0xF8, 0x9D, 0x52, 0x29,
                    0xB5, 0x31, 0xC8, 0x45, 0x83, 0x6F, 0x99, 0xB0,
                    0x86, 0x01, 0xF1, 0x13, 0xBC, 0xE0, 0x36, 0xF9,
                    0x93, 0x55, 0x54, 0xD1, 0xAA, 0x5F, 0x03, 0x74,
                    0xE5, 0xCD, 0xAA, 0xCB, 0x39, 0x25, 0x03, 0x5C,
                    0x7C, 0x16, 0x9B, 0x27, 0xC4, 0x42, 0x6D, 0xF0,
                    0xA6, 0xB1, 0x9A, 0xF3, 0xBA, 0xEA, 0xB1, 0x38
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 7 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x10, 0xAC, 0x49, 0xA6, 0xA2, 0xEB, 0xF6, 0x04,
                    0x18, 0x9C, 0x5F, 0x40, 0xFC, 0x75, 0xAF, 0x2D,
                    0x42, 0xD7, 0x7D, 0xE9, 0xA2, 0x78, 0x27, 0x09,
                    0xB1, 0xEB, 0x4E, 0xAF, 0x1C, 0xFE, 0x91, 0x08,
                    0xD7, 0x00, 0x3B, 0x70, 0x3A, 0x34, 0x99, 0xD5,
                    0xE2, 0x95, 0x29, 0xD3, 0x9B, 0xA0, 0x40, 0xA4,
                    0x49, 0x55, 0x12, 0x71, 0x40, 0xF8, 0x1A, 0x8A,
                    0x89, 0xA9, 0x6F, 0x99, 0x2A, 0xC0, 0xFE, 0x79
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 8 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x66, 0x7C, 0x2F, 0x77, 0x8E, 0x06, 0x16, 0xE6,
                    0x11, 0xBD, 0x0C, 0x14, 0xB8, 0xA6, 0x00, 0xC5,
                    0x88, 0x45, 0x51, 0x70, 0x1A, 0x94, 0x9E, 0xF0,
                    0xEB, 0xFD, 0x72, 0xD4, 0x52, 0xD6, 0x4E, 0x84,
                    0xBE, 0x9F, 0x43, 0x03, 0xC0, 0xB9, 0x91, 0x34,
                    0x70, 0x53, 0x2E, 0x65, 0x21, 0xA8, 0x27, 0x95,
                    0x1D, 0x39, 0xF5, 0xC6, 0x31, 0xCF, 0xD9, 0x8C,
                    0xE3, 0x9A, 0xC4, 0xD7, 0xA5, 0xA8, 0x3B, 0xA9
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 9 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x99, 0xD2, 0xF0, 0xEB, 0xC2, 0x99, 0x68, 0x08,
                    0x20, 0x86, 0x33, 0xCD, 0x99, 0x26, 0xBF, 0x7E,
                    0xC3, 0xDA, 0xB7, 0x3D, 0xAA, 0xD3, 0x6E, 0x85,
                    0xB3, 0x04, 0x0A, 0x69, 0x8E, 0x6D, 0x1C, 0xE0
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 10 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                    0x24, 0xE8, 0x1D, 0x89, 0xF0, 0x13, 0x04, 0x69,
                    0x5C, 0xE9, 0x43, 0xF7, 0xD5, 0xEB, 0xD0, 0x0E,
                    0xF7, 0x26, 0xA0, 0x86, 0x4B, 0x4F, 0xF3, 0x38,
                    0x95, 0xB4, 0xE8, 0x6B, 0xEA, 0xDC, 0x54, 0x56
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 11 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x4A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
                    0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
                    0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
                    0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
                    0x41, 0x60, 0xBC, 0xFC, 0x3F, 0x46, 0x6E, 0xCB,
                    0x8F, 0xAC, 0xD1, 0x9A, 0xDE, 0x57, 0xD8, 0x69,
                    0x9D, 0x74, 0xE7, 0x20, 0x7D, 0x78, 0xC6, 0xAE,
                    0xDC, 0x37, 0x99, 0xB5, 0x2A, 0x8E, 0x05, 0x98
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 12 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F,
                    0x41, 0x60, 0xBC, 0xFC, 0x3F, 0x46, 0x6E, 0xCB,
                    0x8F, 0xAC, 0xD1, 0x9A, 0xDE, 0x57, 0xD8, 0x69,
                    0x9D, 0x74, 0xE7, 0x20, 0x7D, 0x78, 0xC6, 0xAE,
                    0xDC, 0x37, 0x99, 0xB5, 0x2A, 0x8E, 0x05, 0x98
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 13 */
                let pk = [
                    0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                    0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                    0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                    0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
                ];
                let msg = [
                    0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                    0x14, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                    0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                    0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
                ];
                let sig = [
                    0x66, 0x7C, 0x2F, 0x77, 0x8E, 0x06, 0x16, 0xE6,
                    0x11, 0xBD, 0x0C, 0x14, 0xB8, 0xA6, 0x00, 0xC5,
                    0x88, 0x45, 0x51, 0x70, 0x1A, 0x94, 0x9E, 0xF0,
                    0xEB, 0xFD, 0x72, 0xD4, 0x52, 0xD6, 0x4E, 0x84,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
                    0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,
                    0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41
                ];
                schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
            }
            {
                /* Test vector 14 */
                let pk = [
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x30
                ];
                /* No need to check the signature of the test vector as parsing the pubkey already fails */
                assert!(XOnlyPublicKey::from_slice(&pk).is_err());
            }
    }

}