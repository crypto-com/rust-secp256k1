//! # Schnorr signatures compliant with BIP-340
#[cfg(any(test, feature = "rand"))]
use rand::Rng;

use self::super_ffi::CPtr;
use super::{
    constants, ffi as super_ffi, from_hex, key, key::PublicKey, key::SecretKey, Error,
    Error::InvalidPublicKey, Message, Secp256k1, Signing, Verification,
};
use core::{fmt, str};
use ffi::schnorrsig as ffi;

/// A Secp256k1 X-only public key, used for verification of Schnorr signatures
#[derive(Clone, PartialEq, Eq, Debug, PartialOrd, Ord, Hash)]
#[cfg_attr(not(feature = "zeroize"), derive(Copy))]
pub struct XOnlyPublicKey(ffi::XOnlyPublicKey);

impl fmt::Display for XOnlyPublicKey {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let ser = self.serialize();
        for ch in &ser[..] {
            write!(f, "{:02x}", *ch)?;
        }
        Ok(())
    }
}

impl str::FromStr for XOnlyPublicKey {
    type Err = Error;
    fn from_str(s: &str) -> Result<XOnlyPublicKey, Error> {
        let mut res = [0; constants::XONLY_PUBLIC_KEY_SIZE];
        match from_hex(s, &mut res) {
            Ok(constants::XONLY_PUBLIC_KEY_SIZE) => {
                XOnlyPublicKey::from_slice(&res[0..constants::XONLY_PUBLIC_KEY_SIZE])
            }
            _ => Err(Error::InvalidPublicKey),
        }
    }
}

/// Denotes if the point encoded by `xonly_pubkey` is the negation of `pubkey`
pub type IsNegated = bool;

impl XOnlyPublicKey {
    /// Obtains a raw const pointer suitable for use with FFI functions
    #[inline]
    pub fn as_ptr(&self) -> *const ffi::XOnlyPublicKey {
        &self.0 as *const _
    }

    /// Obtains a raw mutable pointer suitable for use with FFI functions
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut ffi::XOnlyPublicKey {
        &mut self.0 as *mut _
    }

    /// Creates a new x-only public key from a secret key.
    #[inline]
    pub fn from_secret_key<C: Signing>(secp: &Secp256k1<C>, sk: &SecretKey) -> XOnlyPublicKey {
        let pk = PublicKey::from_secret_key(secp, sk);
        XOnlyPublicKey::from_pubkey(&pk).0
    }

    /// Serialize an xonly_pubkey object into a 32-byte sequence.
    #[inline]
    pub fn serialize(&self) -> [u8; constants::XONLY_PUBLIC_KEY_SIZE] {
        let mut ret = [0; constants::XONLY_PUBLIC_KEY_SIZE];

        unsafe {
            let err = ffi::secp256k1_xonly_pubkey_serialize(
                super_ffi::secp256k1_context_no_precomp,
                ret.as_mut_ptr(),
                self.as_ptr(),
            );
            debug_assert_eq!(err, 1);
        }
        ret
    }

    /// Creates a x-only public key directly from a slice
    #[inline]
    pub fn from_slice(data: &[u8]) -> Result<XOnlyPublicKey, Error> {
        let mut pk = ffi::XOnlyPublicKey::new();
        if data.len() != constants::XONLY_PUBLIC_KEY_SIZE {
            Err(InvalidPublicKey)
        } else {
            unsafe {
                if ffi::secp256k1_xonly_pubkey_parse(
                    super_ffi::secp256k1_context_no_precomp,
                    &mut pk,
                    data.as_ptr(),
                ) == 1
                {
                    Ok(XOnlyPublicKey(pk))
                } else {
                    Err(InvalidPublicKey)
                }
            }
        }
    }

    /// Creates a x-only public key from a public key
    #[inline]
    pub fn from_pubkey(pk: &PublicKey) -> (XOnlyPublicKey, IsNegated) {
        let mut ret = ffi::XOnlyPublicKey::new();
        let mut is_negated: i32 = 0;
        unsafe {
            let err = ffi::secp256k1_xonly_pubkey_from_pubkey(
                super_ffi::secp256k1_context_no_precomp,
                &mut ret,
                &mut is_negated,
                pk.as_ptr(),
            );
            debug_assert_eq!(err, 1);
        }
        (XOnlyPublicKey(ret), is_negated == 1)
    }
}

impl CPtr for XOnlyPublicKey {
    type Target = ffi::XOnlyPublicKey;
    fn as_c_ptr(&self) -> *const Self::Target {
        self.as_ptr()
    }

    fn as_mut_c_ptr(&mut self) -> *mut Self::Target {
        self.as_mut_ptr()
    }
}

/// Creates a new x-only public key from a FFI x-only public key
impl From<ffi::XOnlyPublicKey> for XOnlyPublicKey {
    #[inline]
    fn from(pk: ffi::XOnlyPublicKey) -> XOnlyPublicKey {
        XOnlyPublicKey(pk)
    }
}

/// A Schnorr signature
pub struct SchnorrSignature([u8; constants::SCHNORR_SIGNATURE_SIZE]);
impl_array_newtype!(SchnorrSignature, u8, constants::SCHNORR_SIGNATURE_SIZE);
impl_pretty_debug!(SchnorrSignature);

impl fmt::LowerHex for SchnorrSignature {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        for ch in &self.0[..] {
            write!(f, "{:02x}", *ch)?;
        }
        Ok(())
    }
}

impl fmt::Display for SchnorrSignature {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        fmt::LowerHex::fmt(self, f)
    }
}

impl str::FromStr for SchnorrSignature {
    type Err = Error;
    fn from_str(s: &str) -> Result<SchnorrSignature, Error> {
        let mut res = [0; constants::SCHNORR_SIGNATURE_SIZE];
        match from_hex(s, &mut res) {
            Ok(constants::SCHNORR_SIGNATURE_SIZE) => Ok(SchnorrSignature(res)),
            _ => Err(Error::InvalidSignature),
        }
    }
}

impl SchnorrSignature {
    #[inline]
    /// Converts the default encoded byte slice to a Schnorr signature
    pub fn from_default(data: &[u8]) -> Result<SchnorrSignature, Error> {
        if data.len() != 64 {
            return Err(Error::InvalidSignature);
        }
        let mut res = [0; constants::SCHNORR_SIGNATURE_SIZE];
        res.copy_from_slice(data);
        Ok(SchnorrSignature(res))
    }

    #[inline]
    /// Serializes the Schnorr signature in the default format
    pub fn serialize_default(&self) -> [u8; 64] {
        self.0.clone()
    }
}

/// Schnorr fresh auxiliary randomness
pub struct AuxRandNonce([u8; constants::SCHNORR_NONCE_SIZE]);
impl_array_newtype!(AuxRandNonce, u8, constants::SCHNORR_NONCE_SIZE);
impl_pretty_debug!(AuxRandNonce);

impl AuxRandNonce {
    /// Serializes nonce into array
    #[inline]
    pub fn serialize(&self) -> [u8; constants::SCHNORR_NONCE_SIZE] {
        self.0
    }

    /// Deserializes array into nonce
    #[inline]
    pub fn deserialize_from(array: [u8; constants::SCHNORR_NONCE_SIZE]) -> Self {
        Self(array)
    }
}

/// Constructs a Schnorr signature for `msg` using the secret key `sk` and
/// fresh randomness for synthetic BIP Schnorr nonce.
/// Requires a signing-capable context.
pub fn schnorr_sign_aux<C: Signing>(secp: &Secp256k1<C>,
                                    msg: &Message,
                                    sk: &key::SecretKey,
                                    aux_rand: &AuxRandNonce)
                                    -> SchnorrSignature {
    let mut keypair = ffi::Secp256k1KeyPair::new();

    unsafe {
        // We can assume the return value because it's not possible to construct
        // an invalid keypair from a valid `SecretKey`
        assert_eq!(
            ffi::secp256k1_keypair_create(secp.ctx, &mut keypair, sk.as_c_ptr()),
            1
        );
    }

    let mut ret = [0; constants::SCHNORR_SIGNATURE_SIZE];

    unsafe {
        // We can assume the return value because it's not possible to construct
        // an invalid signature from a valid `Message` and `SecretKey`
        assert_eq!(
            ffi::secp256k1_schnorrsig_sign(
                secp.ctx,
                ret.as_mut_c_ptr(),
                msg.as_c_ptr(),
                &keypair,
                Option::None,
                aux_rand.as_c_ptr() as *const super_ffi::types::c_void
            ),
            1
        );
    }

    SchnorrSignature(ret)
}

/// Constructs a Schnorr signature for `msg` using the secret key `sk` and random generator for BIP Schnorr nonce.
/// Requires a signing-capable context.
#[cfg(any(test, feature = "rand"))]
pub fn schnorr_sign<C: Signing, R: Rng + ?Sized>(secp: &Secp256k1<C>,
                                                 msg: &Message,
                                                 sk: &key::SecretKey,
                                                 rng: &mut R)
                                                 -> SchnorrSignature {
    let data = AuxRandNonce::deserialize_from(key::random_32_bytes(rng));
    schnorr_sign_aux(secp, msg, sk, &data)
}

/// Checks that `sig` is a valid Schnorr signature for `msg` using the public
/// key `pubkey`. Returns `Ok(true)` on success.
/// Requires a verify-capable context.
#[inline]
pub fn schnorr_verify<C: Verification>(secp: &Secp256k1<C>,
                                       msg: &Message,
                                       sig: &SchnorrSignature,
                                       pk: &key::XOnlyPublicKey)
                                       -> Result<(), Error> {
    unsafe {
        if ffi::secp256k1_schnorrsig_verify(secp.ctx, sig.as_c_ptr(), msg.as_c_ptr(), pk.as_c_ptr())
            == 0
        {
            Err(Error::IncorrectSignature)
        } else {
            Ok(())
        }
    }
}

#[cfg(test)]
mod tests {
    use super::{
        key::{self, SecretKey, XOnlyPublicKey},
        schnorr_sign, schnorr_sign_aux, schnorr_verify, AuxRandNonce, Message, SchnorrSignature,
        Secp256k1,
    };
    use rand::{thread_rng, RngCore};

    #[test]
    fn schnorr_capabilities() {
        let sign = Secp256k1::signing_only();
        let vrfy = Secp256k1::verification_only();
        let full = Secp256k1::new();

        let mut msg = [0u8; 32];
        thread_rng().fill_bytes(&mut msg);
        let msg = Message::from_slice(&msg).unwrap();

        // Try key generation
        let mut rng = thread_rng();
        let (sk, pk) = full.generate_keypair(&mut rng);
        let (x_only_pk, _) = XOnlyPublicKey::from_pubkey(&pk);
        let data = AuxRandNonce::deserialize_from(key::random_32_bytes(&mut rng));
        // Try signing
        assert_eq!(
            schnorr_sign_aux(&sign, &msg, &sk, &data),
            schnorr_sign_aux(&full, &msg, &sk, &data)
        );
        let sig = schnorr_sign(&full, &msg, &sk, &mut rng);

        // Try verifying
        assert!(schnorr_verify(&vrfy, &msg, &sig, &x_only_pk).is_ok());
        assert!(schnorr_verify(&full, &msg, &sig, &x_only_pk).is_ok());
    }

    fn schnorr_bip_vectors_check_signing(
        sk_serialized: &[u8; 32],
        x_only_pk_serialized: &[u8; 32],
        aux_rand: &[u8; 32],
        msg: &[u8; 32],
        expected_sig_serialized: &[u8; 64],
    ) {
        let secp = Secp256k1::new();
        let sk = SecretKey::from_slice(&sk_serialized[..]).expect("failed to parse secret key");
        let msg32 = Message::from_slice(&msg[..]).expect("failed to parse message");
        let expected_sig = SchnorrSignature::from_default(&expected_sig_serialized[..])
            .expect("failed to parse Schnorr sig");
        let data = AuxRandNonce::deserialize_from(aux_rand.clone());
        let sig = schnorr_sign_aux(&secp, &msg32, &sk, &data);
        assert_eq!(sig, expected_sig);
        let serialized_sig = sig.serialize_default();
        assert!(
            serialized_sig
                .iter()
                .zip(expected_sig_serialized.iter())
                .all(|(a, b)| a == b),
            "Serialiazed signatures are not equal"
        );
        let pk = XOnlyPublicKey::from_slice(&x_only_pk_serialized[..])
            .expect("failed to parse public key");
        assert!(schnorr_verify(&secp, &msg32, &sig, &pk).is_ok());
    }

    fn schnorr_bip_vectors_check_verify(
        x_only_pk_serialized: &[u8; 32],
        msg: &[u8; 32],
        sig_serialized: &[u8; 64],
        is_ok: bool,
    ) {
        let secp = Secp256k1::new();
        let msg32 = Message::from_slice(&msg[..]).expect("failed to parse message");
        let sig = SchnorrSignature::from_default(&sig_serialized[..])
            .expect("failed to parse Schnorr sig");
        let pk = XOnlyPublicKey::from_slice(&x_only_pk_serialized[..])
            .expect("failed to parse public key");
        assert_eq!(schnorr_verify(&secp, &msg32, &sig, &pk).is_ok(), is_ok);
    }

    #[test]
    fn schnorr_bip_vectors() {
        // Test vector 0 -- zero message not allowed in Rust API
        {
            /* Test vector 1 */
            let sk = [
                0xB7, 0xE1, 0x51, 0x62, 0x8A, 0xED, 0x2A, 0x6A,
                0xBF, 0x71, 0x58, 0x80, 0x9C, 0xF4, 0xF3, 0xC7,
                0x62, 0xE7, 0x16, 0x0F, 0x38, 0xB4, 0xDA, 0x56,
                0xA7, 0x84, 0xD9, 0x04, 0x51, 0x90, 0xCF, 0xEF
            ];
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let aux_rand = [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0x0E, 0x12, 0xB8, 0xC5, 0x20, 0x94, 0x8A, 0x77,
                0x67, 0x53, 0xA9, 0x6F, 0x21, 0xAB, 0xD7, 0xFD,
                0xC2, 0xD7, 0xD0, 0xC0, 0xDD, 0xC9, 0x08, 0x51,
                0xBE, 0x17, 0xB0, 0x4E, 0x75, 0xEF, 0x86, 0xA4,
                0x7E, 0xF0, 0xDA, 0x46, 0xC4, 0xDC, 0x4D, 0x0D,
                0x1B, 0xCB, 0x86, 0x68, 0xC2, 0xCE, 0x16, 0xC5,
                0x4C, 0x7C, 0x23, 0xA6, 0x71, 0x6E, 0xDE, 0x30,
                0x3A, 0xF8, 0x67, 0x74, 0x91, 0x7C, 0xF9, 0x28
            ];
            schnorr_bip_vectors_check_signing(&sk, &pk, &aux_rand, &msg, &sig);
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
        }
        {
            /* Test vector 2 */
            let sk = [
                0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34,
                0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1,
                0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74,
                0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x14, 0xE5, 0xC9
            ];
            let pk = [
                0xDD, 0x30, 0x8A, 0xFE, 0xC5, 0x77, 0x7E, 0x13,
                0x12, 0x1F, 0xA7, 0x2B, 0x9C, 0xC1, 0xB7, 0xCC,
                0x01, 0x39, 0x71, 0x53, 0x09, 0xB0, 0x86, 0xC9,
                0x60, 0xE1, 0x8F, 0xD9, 0x69, 0x77, 0x4E, 0xB8
            ];
            let aux_rand = [
                0xC8, 0x7A, 0xA5, 0x38, 0x24, 0xB4, 0xD7, 0xAE,
                0x2E, 0xB0, 0x35, 0xA2, 0xB5, 0xBB, 0xBC, 0xCC,
                0x08, 0x0E, 0x76, 0xCD, 0xC6, 0xD1, 0x69, 0x2C,
                0x4B, 0x0B, 0x62, 0xD7, 0x98, 0xE6, 0xD9, 0x06
            ];
            let msg = [
                0x7E, 0x2D, 0x58, 0xD8, 0xB3, 0xBC, 0xDF, 0x1A,
                0xBA, 0xDE, 0xC7, 0x82, 0x90, 0x54, 0xF9, 0x0D,
                0xDA, 0x98, 0x05, 0xAA, 0xB5, 0x6C, 0x77, 0x33,
                0x30, 0x24, 0xB9, 0xD0, 0xA5, 0x08, 0xB7, 0x5C
            ];
            let sig = [
                0xFC, 0x01, 0x2F, 0x9F, 0xB8, 0xFE, 0x00, 0xA3,
                0x58, 0xF5, 0x1E, 0xF9, 0x3D, 0xCE, 0x0D, 0xC0,
                0xC8, 0x95, 0xF6, 0xE9, 0xA8, 0x7C, 0x6C, 0x49,
                0x05, 0xBC, 0x82, 0x0B, 0x0C, 0x36, 0x77, 0x61,
                0x6B, 0x87, 0x37, 0xD1, 0x4E, 0x70, 0x3A, 0xF8,
                0xE1, 0x6E, 0x22, 0xE5, 0xB8, 0xF2, 0x62, 0x27,
                0xD4, 0x1E, 0x51, 0x28, 0xF8, 0x2D, 0x86, 0xF7,
                0x47, 0x24, 0x4C, 0xC2, 0x89, 0xC7, 0x4D, 0x1D
            ];
            schnorr_bip_vectors_check_signing(&sk, &pk, &aux_rand, &msg, &sig);
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
        }
        {
            /* Test vector 3 */
            let sk = [
                0x0B, 0x43, 0x2B, 0x26, 0x77, 0x93, 0x73, 0x81,
                0xAE, 0xF0, 0x5B, 0xB0, 0x2A, 0x66, 0xEC, 0xD0,
                0x12, 0x77, 0x30, 0x62, 0xCF, 0x3F, 0xA2, 0x54,
                0x9E, 0x44, 0xF5, 0x8E, 0xD2, 0x40, 0x17, 0x10
            ];
            let pk = [
                0x25, 0xD1, 0xDF, 0xF9, 0x51, 0x05, 0xF5, 0x25,
                0x3C, 0x40, 0x22, 0xF6, 0x28, 0xA9, 0x96, 0xAD,
                0x3A, 0x0D, 0x95, 0xFB, 0xF2, 0x1D, 0x46, 0x8A,
                0x1B, 0x33, 0xF8, 0xC1, 0x60, 0xD8, 0xF5, 0x17
            ];
            let aux_rand = [
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            ];
            let msg = [
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            ];
            let sig = [
                0xFC, 0x13, 0x2D, 0x4E, 0x42, 0x6D, 0xFF, 0x53,
                0x5A, 0xEC, 0x0F, 0xA7, 0x08, 0x3A, 0xC5, 0x11,
                0x8B, 0xC1, 0xD5, 0xFF, 0xFD, 0x84, 0x8A, 0xBD,
                0x82, 0x90, 0xC2, 0x3F, 0x27, 0x1C, 0xA0, 0xDD,
                0x11, 0xAE, 0xDC, 0xEA, 0x3F, 0x55, 0xDA, 0x9B,
                0xD6, 0x77, 0xFE, 0x29, 0xC9, 0xDD, 0xA0, 0xCF,
                0x87, 0x8B, 0xCE, 0x43, 0xFD, 0xE0, 0xE3, 0x13,
                0xD6, 0x9D, 0x1A, 0xF7, 0xA5, 0xAE, 0x83, 0x69
            ];
            schnorr_bip_vectors_check_signing(&sk, &pk, &aux_rand, &msg, &sig);
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
        }
        {
            /* Test vector 4 */
            let pk = [
                0xD6, 0x9C, 0x35, 0x09, 0xBB, 0x99, 0xE4, 0x12,
                0xE6, 0x8B, 0x0F, 0xE8, 0x54, 0x4E, 0x72, 0x83,
                0x7D, 0xFA, 0x30, 0x74, 0x6D, 0x8B, 0xE2, 0xAA,
                0x65, 0x97, 0x5F, 0x29, 0xD2, 0x2D, 0xC7, 0xB9
            ];
            let msg = [
                0x4D, 0xF3, 0xC3, 0xF6, 0x8F, 0xCC, 0x83, 0xB2,
                0x7E, 0x9D, 0x42, 0xC9, 0x04, 0x31, 0xA7, 0x24,
                0x99, 0xF1, 0x78, 0x75, 0xC8, 0x1A, 0x59, 0x9B,
                0x56, 0x6C, 0x98, 0x89, 0xB9, 0x69, 0x67, 0x03
            ];
            let sig = [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x3B, 0x78, 0xCE, 0x56, 0x3F,
                0x89, 0xA0, 0xED, 0x94, 0x14, 0xF5, 0xAA, 0x28,
                0xAD, 0x0D, 0x96, 0xD6, 0x79, 0x5F, 0x9C, 0x63,
                0x0E, 0xC5, 0x0E, 0x53, 0x63, 0xE2, 0x27, 0xAC,
                0xAC, 0x6F, 0x54, 0x2C, 0xE1, 0xC0, 0xB1, 0x86,
                0x65, 0x7E, 0x0E, 0x0D, 0x1A, 0x6F, 0xFE, 0x28,
                0x3A, 0x33, 0x43, 0x8D, 0xE4, 0x73, 0x84, 0x19
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, true);
        }
        {
            /* Test vector 5 */
            let pk = [
                0xEE, 0xFD, 0xEA, 0x4C, 0xDB, 0x67, 0x77, 0x50,
                0xA4, 0x20, 0xFE, 0xE8, 0x07, 0xEA, 0xCF, 0x21,
                0xEB, 0x98, 0x98, 0xAE, 0x79, 0xB9, 0x76, 0x87,
                0x66, 0xE4, 0xFA, 0xA0, 0x4A, 0x2D, 0x4A, 0x34
            ];
            /* No need to check the signature of the test vector as parsing the pubkey already fails */
            assert!(XOnlyPublicKey::from_slice(&pk).is_err());
        }
        {
            /* Test vector 6 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0xF9, 0x30, 0x8A, 0x01, 0x92, 0x58, 0xC3, 0x10,
                0x49, 0x34, 0x4F, 0x85, 0xF8, 0x9D, 0x52, 0x29,
                0xB5, 0x31, 0xC8, 0x45, 0x83, 0x6F, 0x99, 0xB0,
                0x86, 0x01, 0xF1, 0x13, 0xBC, 0xE0, 0x36, 0xF9,
                0x95, 0xA5, 0x79, 0xDA, 0x95, 0x9F, 0xA7, 0x39,
                0xFC, 0xE3, 0x9E, 0x8B, 0xD1, 0x6F, 0xEC, 0xB5,
                0xCD, 0xCF, 0x97, 0x06, 0x0B, 0x2C, 0x73, 0xCD,
                0xE6, 0x0E, 0x87, 0xAB, 0xCA, 0x1A, 0xA5, 0xD9
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 7 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0xF8, 0x70, 0x46, 0x54, 0xF4, 0x68, 0x7B, 0x73,
                0x65, 0xED, 0x32, 0xE7, 0x96, 0xDE, 0x92, 0x76,
                0x13, 0x90, 0xA3, 0xBC, 0xC4, 0x95, 0x17, 0x9B,
                0xFE, 0x07, 0x38, 0x17, 0xB7, 0xED, 0x32, 0x82,
                0x4E, 0x76, 0xB9, 0x87, 0xF7, 0xC1, 0xF9, 0xA7,
                0x51, 0xEF, 0x5C, 0x34, 0x3F, 0x76, 0x45, 0xD3,
                0xCF, 0xFC, 0x7D, 0x57, 0x0B, 0x9A, 0x71, 0x92,
                0xEB, 0xF1, 0x89, 0x8E, 0x13, 0x44, 0xE3, 0xBF
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 8 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0x70, 0x36, 0xD6, 0xBF, 0xE1, 0x83, 0x7A, 0xE9,
                0x19, 0x63, 0x10, 0x39, 0xA2, 0xCF, 0x65, 0x2A,
                0x29, 0x5D, 0xFA, 0xC9, 0xA8, 0xBB, 0xB0, 0x80,
                0x60, 0x14, 0xB2, 0xF4, 0x8D, 0xD7, 0xC8, 0x07,
                0x6B, 0xE9, 0xF8, 0x4A, 0x9C, 0x54, 0x45, 0xBE,
                0xBD, 0x78, 0x0C, 0x8B, 0x5C, 0xCD, 0x45, 0xC8,
                0x83, 0xD0, 0xDC, 0x47, 0xCD, 0x59, 0x4B, 0x21,
                0xA8, 0x58, 0xF3, 0x1A, 0x19, 0xAA, 0xB7, 0x1D
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 9 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x99, 0x15, 0xEE, 0x59, 0xF0, 0x7F, 0x9D, 0xBB,
                0xAE, 0xDC, 0x31, 0xBF, 0xCC, 0x9B, 0x34, 0xAD,
                0x49, 0xDE, 0x66, 0x9C, 0xD2, 0x47, 0x73, 0xBC,
                0xED, 0x77, 0xDD, 0xA3, 0x6D, 0x07, 0x3E, 0xC8
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 10 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0xC7, 0xEC, 0x91, 0x8B, 0x2B, 0x9C, 0xF3, 0x40,
                0x71, 0xBB, 0x54, 0xBE, 0xD7, 0xEB, 0x4B, 0xB6,
                0xBA, 0xB1, 0x48, 0xE9, 0xA7, 0xE3, 0x6E, 0x6B,
                0x22, 0x8F, 0x95, 0xDF, 0xA0, 0x8B, 0x43, 0xEC
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 11 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0x4A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
                0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
                0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
                0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
                0x94, 0x16, 0x07, 0xB5, 0x63, 0xAB, 0xBA, 0x41,
                0x42, 0x87, 0xF3, 0x74, 0xA3, 0x32, 0xBA, 0x36,
                0x36, 0xDE, 0x00, 0x9E, 0xE1, 0xEF, 0x55, 0x1A,
                0x17, 0x79, 0x6B, 0x72, 0xB6, 0x8B, 0x8A, 0x24
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 12 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x2F,
                0x94, 0x16, 0x07, 0xB5, 0x63, 0xAB, 0xBA, 0x41,
                0x42, 0x87, 0xF3, 0x74, 0xA3, 0x32, 0xBA, 0x36,
                0x36, 0xDE, 0x00, 0x9E, 0xE1, 0xEF, 0x55, 0x1A,
                0x17, 0x79, 0x6B, 0x72, 0xB6, 0x8B, 0x8A, 0x24
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 13 */
            let pk = [
                0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
                0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
                0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
                0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59
            ];
            let msg = [
                0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
                0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
                0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
                0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89
            ];
            let sig = [
                0x70, 0x36, 0xD6, 0xBF, 0xE1, 0x83, 0x7A, 0xE9,
                0x19, 0x63, 0x10, 0x39, 0xA2, 0xCF, 0x65, 0x2A,
                0x29, 0x5D, 0xFA, 0xC9, 0xA8, 0xBB, 0xB0, 0x80,
                0x60, 0x14, 0xB2, 0xF4, 0x8D, 0xD7, 0xC8, 0x07,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
                0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,
                0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41
            ];
            schnorr_bip_vectors_check_verify(&pk, &msg, &sig, false);
        }
        {
            /* Test vector 14 */
            let pk = [
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFC, 0x30
            ];
            /* No need to check the signature of the test vector as parsing the pubkey already fails */
            assert!(XOnlyPublicKey::from_slice(&pk).is_err());
        }
    }
}
